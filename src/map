#!/usr/bin/perl
#    $Id: map,v 1.41 2012/10/08 05:24:57 slotzero Exp $

use strict;
use warnings;

#    Copyright (C) 1998-2001  Roderick Schertler.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

(my $Me = $0) =~ s-.*/--;

my %lan = map { $_ => 1 } qw(e1m7 e1m8 end);

my @lev = (
	[], # unused

	[ # small
		'start',# Introduction
		'e1m6',	# The Door To Chthon
		'e1m7',	# The House of Chthon
		'e3m2',	# The Vaults of Zin
		'e3m3',	# The Tomb of Terror
		'e3m7',	# The Haunted Halls
		'end',	# Shub-Niggurath's Pit
		'dm1',	# Place of Two Deaths
		'dm4',	# The Bad Place
		'dm5',	# The Cistern
		'dm6',	# The Dark Zone
	],

	[ # medium
		'e1m1',	# The Slipgate Complex
		'e1m2',	# Castle of the Damned
		'e1m3',	# The Necropolis
		'e1m4',	# The Grisly Grotto
		'e1m8',	# Ziggurat Vertigo
		'e1m5',	# Gloom Keep
		'e2m1',	# The Installation
		'e2m2',	# The Ogre Citadel
		'e2m3',	# Crypt of Decay
		'e2m7',	# Underearth
		'e2m6',	# The Dismal Oubliette
		'e3m1',	# Termination Central
		'e3m4',	# Satan's Dark Delight
		'e3m6',	# Chambers of Torment
		'e4m1',	# The Sewage System
		'e4m2',	# The Tower of Despair
		'e4m6',	# The Pain Maze
		'dm2',	# Claustrophobopolis
		'dm3',	# The Abandoned Base
	],

	[ # large
		'e2m4',	# The Ebon Fortress
		'e2m5',	# The Wizard's Manse
		'e3m5',	# Wind Tunnels
		'e4m3',	# The Elder God Shrine
		'e4m4',	# The Palace of Hate
		'e4m5',	# Hell's Atrium
		'e4m8',	# The Nameless City
		'e4m7',	# Azure Agony
	],
);

my @custom_lev = (
	[], # unused

	[ # small
		'waltz',
		'haunted',
		'kjdm11',
		'bless',
		'pkeg2',
		'strafin4',
		'qcon1',
		'ztndm3',
		'ztndm5',
		'dapak9',
		'kjdm13',
		'aerowalk',
		'ztndm6',
		'pinion2',
		'ultrav',
		'baldm7',
		'crdm1',
		'dazdm11',
		'factory3',
		'gendm2',
		'rcdm7',
		'xntrick',
		'baldm6',
		'arena',
		'boxing',
		'break010',
		'deathole',
		'dethcrss',
		'dome7b',
		'field',
		'hockey',
		'mortis',
		'muny03',
		'muny10',
		'pain',
		'pasta',
		'warzone',
	],

	[ # medium
		'atlantis',
		'nindm2',
		'park',
		'alkdm04',
		'ritual',
		'lacrima',
		'debello',
		'auhdm2',
		'matdm2',
		'prelude',
		'efdm9',
		'exdm3',
		'exdm4',
		'mjdm1',
		'lilith',
		'rf',
		'swk',
		'zed2',
		'q3dm6ish',
		'spear',
		'tridm1',
		'efdm7',
		'effigy',
		'spinev2',
		'efdm2',
		'lfdm1v11',
		'oma',
		'paddydm1',
		'tridm2',
		'armory2',
		'auhdm1',
		'jndm6',
		'a2',
		'dazdm12',
		'dranzdm6',
		'hip2m2',
		'hip2m3',
		'hipdm1',
		'start2',
		'baldm3',
		'chesdm2',
		'efdm10',
		'efdm13',
		'chillers',
		'cmania3',
		'dizzy',
		'dthspwn2',
		'efdm3',
		'flood',
		'g12',
		'highrise',
		'hillking',
		'house',
		'my_home',
		'warzone2',
	],

	[ # large
		'kikdm3',
		'rtz',
		'jadm1',
		'deadzone',
		'croctear',
		'alk08dm',
		'tridm3',
		'summer',
		'elkdm2',
		'unddm2',
		'jvoxdm3',
		'strafin6',
		'dead',
		'fragtwn7',
		'hip1m1',
		'hip1m2',
		'hip1m4',
		'hip1m5',
		'hip2m1',
		'hip2m4',
		'hip2m5',
		'hip2m6',
		'hip3m1',
		'hip3m4',
		'q1edge',
		'sofdm1',
		'sofdm3',
		'disv1',
		'dranzdm7',
		'fragtwn5',
		'fragtwn6',
		'mncrdrug',
		'noircity',
		'oldwest',
		'triumph',
	],
);

@custom_lev = ();

my @arena_lev = (
	[], # unused

	[ # small
		'arenax',
		'terrain2',
		'xarena3',
		'arenazap',
		'arenarg2',
		'arenrg3a',
		'mayan1',
		'2pyramid',
		'2towers',
		'arenarg4',
		'arenarg5',
		'arenarg6',
		'arma4',
		'crandome',
		'egyptra',
		'hill20',
		'iarena2',
		'pitarena',
		'ra_funkf',
		'rgarden',
		'barena1',
		'bbarena2',
		'dm2arena',
		'marena2',
		'marena3',
		'marena4',
		'rarena3',
		'soyarena',
		'uarena1',
		'23ar-a',
		'arendm1a',
		'basarena',
		'bunmoo3',
		'bunski',
		'chamber1',
		'dom2_1ra',
		'football',
#		'gearpr0n',
		'gear8',
		'gnurena',
		'id3',
		'lowgrav',
		'nilsrar3',
		'pen2',
		'ptucket',
		'unholy',
		'yard1',
		'endif',
	],

	[ # medium

	],

	[ # large

	],
);

# Uncomment if you want arena maps.
@custom_lev = @arena_lev;

# Construct %wan, the list of levels which aren't in %lan.
my %wan;
for my $size (1..$#lev)
{
	for my $map (@{ $lev[$size] })
	{
		if (exists $wan{$map})
		{
			die "$Me: duplicate entry for $map\n";
		}
		$wan{$map} = 1;
	}
}
for my $map (keys %lan)
{
	delete $wan{$map} or die "$Me: invalid \%lan entry $map\n";
}

my %custom;
for my $size (1..$#custom_lev)
{
	for my $map (@{ $custom_lev[$size] })
	{
		if (length ($map) > 12)
		{
			die "$Me: $map is over 12 characters\n";
		}
		if (exists $custom{$map})
		{
			die "$Me: duplicate entry for $map\n";
		}
		$custom{$map} = 1;
	}
}

print "// This file is automatically generated by the $Me script.\n";
print "// Don't edit it, edit the script instead.\n";


print "\n";
print "float (float levsize)\n";
print "sized_map_count =\n";
print "{\n";
for my $size (1..$#lev)
{
	my $max = scalar @{ $lev[$size] };
	print "\tif (levsize == $size) return $max;\n";
}
print "\terror (\"invalid arg\");\n";
print "\treturn FALSE;\n";
print "};\n";


print "\n";
print "float (float levsize)\n";
print "sized_custom_count =\n";
print "{\n";
if (!scalar @custom_lev) { print "\tif (levsize)	SUB_Null ();\n"; }
for my $size (1..$#custom_lev)
{
	my $max = scalar @{ $custom_lev[$size] };
	print "\tif (levsize == $size) return $max;\n";
}
print "\treturn FALSE;\n";
print "};\n";


print "\n";
print "string (float levsize, float n)\n";
print "sized_map =\n";
print "{\n";
for my $size (1..$#lev)
{
	print "\tif (levsize == $size) {\n";
	my $ix = 0;
	for my $map (@{ $lev[$size] })
	{
		$ix++;
		print "\t\tif (n == $ix) return \"$map\";\n";
	}
	print "\t}\n";
}
print "\terror (\"invalid arg\");\n";
print "\treturn \"invalid arg\";\n";
print "};\n";


print "\n";
print "string (float levsize, float n)\n";
print "sized_custom =\n";
print "{\n";
if (!scalar @custom_lev)
{
	print "\tif (levsize)	SUB_Null ();\n\tif (n)	SUB_Null ();\n";
}
for my $size (1..$#custom_lev)
{
	print "\tif (levsize == $size) {\n";
	my $ix = 0;
	for my $map (@{ $custom_lev[$size] })
	{
		$ix++;
		print "\t\tif (n == $ix) return \"$map\";\n";
	}
	if (!$ix)
	{
		print "\t\treturn string_null;\n";
	}
	print "\t}\n";
}
print "\treturn string_null;\n";
print "};\n";


print "\n";
print "float (string m)\n";
print "map_size =\n";
print "{\n";
print "\tif (m == string_null) return 0;\n";
for my $size (1..$#lev)
{
	for my $map (@{ $lev[$size] })
	{
		print "\tif (m == \"$map\") return $size;\n";
	}
}
print "\treturn 0;\n";
print "};\n";


print "\n";
print "float (string m)\n";
print "custom_size =\n";
print "{\n";
print "\tif (m == string_null) return 0;\n";
for my $size (1..$#custom_lev)
{
	for my $map (@{ $custom_lev[$size] })
	{
		print "\tif (m == \"$map\") return $size;\n";
	}
}
print "\treturn 0;\n";
print "};\n";


my $wan = keys %wan;
my $lan = $wan + keys %lan;
print "\n";
print "string ()\n";
print "rand_map =\n";
print "{\n";
print "\tlocal float i, n;\n";
print "\n";
print "\tn = $lan;\n";
print "\n";
print "\ti = ceil (random () * n);\n";
my $i = 0; my $cmp;
for my $map (keys %wan, keys %lan)
{
	$i++;
	if ($i == 1)		{ $cmp = "<="; }
	elsif ($i == $lan) 	{ $cmp = ">="; }
	else			{ $cmp = "=="; }
	print "\tif (i $cmp $i) return \"$map\";\n";
}
print "\terror (\"invalid map number\");\n";
print "\treturn \"invalid map number\";\n";
print "};\n";


my $custom = keys %custom;
print "\n";
print "string (float i)\n";
print "rand_custom =\n";
print "{\n";
print "\tif (i)	SUB_Null ();\n";
$i = 0;
for my $map (keys %custom)
{
	$i++;
	if ($i == 1)		{ $cmp = "<="; }
	elsif ($i == $custom) 	{ $cmp = ">="; }
	else			{ $cmp = "=="; }
	print "\tif (i $cmp $i) return \"$map\";\n";
}
print "\treturn \"string_null\";\n";
print "};\n";


print "\n";
print "string (float imp)\n";
print "impulse_to_map =\n";
print "{\n";

for my $map (map { @$_ } @lev ) {
    my $impulse = $map;
    if ($map =~ /^dm([1-6])$/)	{ $impulse = "5$1" }
    elsif ($map eq 'start')	{ $impulse = 57 }
    elsif ($map eq 'end')	{ $impulse = 58 }
    else 			{ $impulse =~ tr/0-9//cd or die "oops `$map'" };
    print "\tif (imp == $impulse) { return \"$map\"; }\n";
}
my $impulse = 59;
for my $map (map { @$_ } @custom_lev) {
    print "\tif (imp == $impulse) { return \"$map\"; }\n";
    $impulse++;
}

print "\treturn string_null;\n";
print "};\n";

print "\n";
print "void ()\n";
print "level_aliases =\n";
print "{\n";

for my $map (map { @$_ } @lev ) {
    my $impulse = $map;
    if ($map =~ /^dm([1-6])$/)	{ $impulse = "5$1" }
    elsif ($map eq 'start')	{ $impulse = 57 }
    elsif ($map eq 'end')	{ $impulse = 58 }
    else 			{ $impulse =~ tr/0-9//cd or die "oops `$map'" };
    print "\tplayer_console_init_level_alias (\"$map\", $impulse);\n";
}
print "};\n";


print "\n";
print "void ()\n";
print "custom_aliases_small =\n";
print "{\n";

$impulse = 59;
for my $map (@{ $custom_lev[1] }) {
    print "\tplayer_console_init_level_alias (\"$map\", $impulse);\n";
    $impulse++;
}
print "};\n";


print "\n";
print "void ()\n";
print "custom_aliases_medium =\n";
print "{\n";

for my $map (@{ $custom_lev[2] }) {
    print "\tplayer_console_init_level_alias (\"$map\", $impulse);\n";
    $impulse++;
}
print "};\n";


print "\n";
print "void ()\n";
print "custom_aliases_large =\n";
print "{\n";

for my $map (@{ $custom_lev[3] }) {
    print "\tplayer_console_init_level_alias (\"$map\", $impulse);\n";
    $impulse++;
}
print "};\n";


my $no_frags	= -23000;
my $team_min	= 1;
my $team_max	= 14;
my $team_nil	= $team_min - 1;
my $team_none	= $team_min - 2;
my $team_tie	= $team_min - 3;
my ($else, $s);

print "\n";
print "float";
$s = '';
for my $t ($team_nil, $team_min .. $team_max) {
    $s .= " tf_$t,";
}
chop $s;
print "$s;\n";

print "\n";
print "void ()\n";
print "frag_init =\n";
print "{\n";
print "\t";
for my $t ($team_nil, $team_min .. $team_max) {
    print "tf_$t = ";
}
print "$no_frags;\n";
print "};\n";

print "\n";
print "void (entity e, float f)\n";
print "add_frag =\n";
print "{\n";
print "\tlocal float e_team;\n\n";
print "\te_team = e.team;\n";
print "\tif (gamemode == MODE_MATCH)\n";
print "\t{\n";
print "\t\tif (!match.state)\n\t\t\treturn;\n";
print "\t\te_team = colors_to_pants (e.team_colors / %1) + 1;\n";
print "\t}\n";
print "\tif (deathmatch & DM_DAMAGE_MATCH && !damage_match_hack) return;\n";
print "\tif (e.runetype == RN_PACK_RAT && f > 0 && !deathmatch & DM_DAMAGE_MATCH) f = f + f * pack_rat_frag_bonus_e (e);\n";
print "\te.frags = e.frags + f;\n";
print "\te.recent_frags = e.recent_frags + f;\n";
$else = '';
for my $t ($team_min .. $team_max, $team_nil) {
    print "\t${else}";
    print "if (e_team == $t) " if $t != $team_nil;
    print "{ if (tf_$t == $no_frags) tf_$t = f; else tf_$t = tf_$t + f; pqc_team_frags (world, e_team - 1, tf_$t); }\n";
    $else = 'else ';
}
print "\tteam_fraglimit ();\n";
print "};\n";

print "\n";
print "float (entity e)\n";
print "team_stats_1 =\n";
print "{\n";
print "\tlocal float t, f, lead, n_teams;\n";
print "\tsprint (e, \"Team frag totals:\\n\");\n";
print "\tn_teams = 0;\n";
for my $t ($team_nil, $team_min .. $team_max) {
    print "\tif (tf_$t != $no_frags)\n";
    print "\t{\n";
    print "\t\tn_teams = n_teams + 1;\n";
    print "\t\tsprint_int_f (e, tf_$t, 4);\n";
    print "\t\tsprint (e, \" \");\n";
    print "\t\tsprint_team (e, $t);\n";
    print "\t\tsprint (e, \"\\n\");\n";
    print "\t}\n";
}
print "\tt = $team_none;\n";
print "\tf = $no_frags;\n";
print "\tlead = $no_frags;\n";
for my $t ($team_nil, $team_min .. $team_max) {
    print <<EOF
	if (tf_$t != $no_frags)
	{
		if (tf_$t > f)
		{
			if (f == $no_frags)
				lead = $no_frags;
			else
				lead = tf_$t - f;
			f = tf_$t;
			t = $t;
		}
		else if (tf_$t == f)
			t = $team_tie;
		// Same leader, but this team came closer than the
		// previous contender, so update the frag difference.
		else if (lead == $no_frags || f - tf_$t < lead)
			lead = f - tf_$t;
	}
EOF
}
print "\tteam_stats_1_lead = lead;\n";
print "\treturn t;\n";
print "};\n";

#print "\n";
#print "void (entity e)\n";
#print "pqc_team_frags_refresh =\n";
#print "{\n";
#print "\tlocal float t, f, lead, n_teams;\n";
#print "\tn_teams = 0;\n";
#for my $t ($team_nil, $team_min .. $team_max) {
#    print "\tif (tf_$t != $no_frags)\n";
#    print "\t\tpqc_team_frags (e, $t, tf_$t);\n";
#}
#print "};\n";
